<?xml version="1.0" encoding="UTF-8"?>
<talendfile:ProcessType xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:talendfile="platform:/resource/org.talend.model/model/TalendFile.xsd" defaultContext="Default" jobType="Standard">
  <context confirmationNeeded="false" hide="false" name="Default"/>
  <parameters>
    <elementParameter field="CLOSED_LIST" name="LOG4J_RUN_LEVEL" value="Info" show="false"/>
    <elementParameter field="TEXT" name="SCREEN_OFFSET_X" value="0" show="false"/>
    <elementParameter field="TEXT" name="SCREEN_OFFSET_Y" value="0" show="false"/>
    <elementParameter field="TEXT" name="REPOSITORY_CONNECTION_ID" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_PROPERTY_TYPENAME" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_HADOOP_DISTRIBUTION" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_HADOOP_VERSION" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_ENABLE_KERBEROS" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_NAME_NODE_PRINCIPAL" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_USERNAME" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_GROUP" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_USE_KEYTAB" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_KT_PRINCIPAL" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_KEY_TAB" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_ENABLE_OO_KERBEROS" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_NAME_NODE_END_POINT" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_JOB_TRACKER_ENDPOINT" value="" show="false"/>
    <elementParameter field="TEXT" name="OOZIE_END_POINT" value="" show="false"/>
    <elementParameter field="CHECK" name="IMPLICITCONTEXT_USE_PROJECT_SETTINGS" value="true" show="false"/>
    <elementParameter field="CHECK" name="STATANDLOG_USE_PROJECT_SETTINGS" value="true" show="false"/>
    <elementParameter field="CHECK" name="MULTI_THREAD_EXECATION" value="false"/>
    <elementParameter field="TEXT" name="PARALLELIZE_UNIT_SIZE" value="25000"/>
    <elementParameter field="CHECK" name="IMPLICIT_TCONTEXTLOAD" value="false"/>
    <elementParameter field="RADIO" name="FROM_FILE_FLAG_IMPLICIT_CONTEXT" value="false" show="false"/>
    <elementParameter field="RADIO" name="FROM_DATABASE_FLAG_IMPLICIT_CONTEXT" value="false" show="false"/>
    <elementParameter field="FILE" name="IMPLICIT_TCONTEXTLOAD_FILE" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="FIELDSEPARATOR" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="OVERRIDE_ENCODING_FLAG" value="false" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="OVERRIDE_ENCODING_IN_EXTRA" value="ISO-8859-15" show="false"/>
    <elementParameter field="TECHNICAL" name="OVERRIDE_ENCODING_IN_EXTRA:ENCODING_TYPE" value="ISO-8859-15" show="false"/>
    <elementParameter field="CLOSED_LIST" name="DB_TYPE_IMPLICIT_CONTEXT" value="" show="false"/>
    <elementParameter field="CLOSED_LIST" name="DB_VERSION_IMPLICIT_CONTEXT" value="" show="false"/>
    <elementParameter field="TEXT" name="URL_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TABLE" name="DRIVER_JAR_IMPLICIT_CONTEXT" show="false"/>
    <elementParameter field="TEXT" name="DRIVER_CLASS_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="HOST_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="LOCAL_SERVICE_NAME_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PROPERTIES_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="SCHEMA_DB_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="USER_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS_IMPLICIT_CONTEXT" value="enc:system.encryption.key.v1:CdFjsPpBEK1LXxPGmDA3vYhdEWm99YB2WGFRhWjQ" show="false"/>
    <elementParameter field="FILE" name="DBFILE_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="DBTABLE" name="DBTABLE_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="QUERY_CONDITION_IMPLICIT_CONTEXT" value="&quot;&quot;" show="false"/>
    <elementParameter field="CLOSED_LIST" name="LOAD_NEW_VARIABLE" value="Warning" show="false"/>
    <elementParameter field="CLOSED_LIST" name="NOT_LOAD_OLD_VARIABLE" value="Warning" show="false"/>
    <elementParameter field="CHECK" name="PRINT_OPERATIONS" value="false" show="false"/>
    <elementParameter field="CHECK" name="DISABLE_ERROR" value="false" show="false"/>
    <elementParameter field="CHECK" name="DISABLE_WARNINGS" value="false" show="false"/>
    <elementParameter field="CHECK" name="DISABLE_INFO" value="false" show="false"/>
    <elementParameter field="CHECK" name="ON_STATCATCHER_FLAG" value="false"/>
    <elementParameter field="CHECK" name="ON_LOGCATCHER_FLAG" value="false"/>
    <elementParameter field="CHECK" name="ON_METERCATCHER_FLAG" value="false"/>
    <elementParameter field="CHECK" name="ON_CONSOLE_FLAG" value="false" show="false"/>
    <elementParameter field="CHECK" name="ON_FILES_FLAG" value="false" show="false"/>
    <elementParameter field="DIRECTORY" name="FILE_PATH" value="&quot;C:/Program Files (x86)/Talend-Studio/studio/workspace/.metadata&quot;" show="false"/>
    <elementParameter field="TEXT" name="FILENAME_STATS" value="&quot;stats_file.txt&quot;" show="false"/>
    <elementParameter field="TEXT" name="FILENAME_LOGS" value="&quot;logs_file.txt&quot;" show="false"/>
    <elementParameter field="TEXT" name="FILENAME_METTER" value="&quot;meter_file.txt&quot;" show="false"/>
    <elementParameter field="ENCODING_TYPE" name="ENCODING" value="ISO-8859-15" show="false"/>
    <elementParameter field="TECHNICAL" name="ENCODING:ENCODING_TYPE" value="ISO-8859-15" show="false"/>
    <elementParameter field="CHECK" name="ON_DATABASE_FLAG" value="false" show="false"/>
    <elementParameter field="CLOSED_LIST" name="DB_TYPE" value="JDBCOutput" show="false"/>
    <elementParameter field="CLOSED_LIST" name="DB_VERSION" value="ORACLE_18" show="false"/>
    <elementParameter field="TEXT" name="URL" value="&quot;&quot;" show="false"/>
    <elementParameter field="TABLE" name="DRIVER_JAR" show="false"/>
    <elementParameter field="TEXT" name="DRIVER_CLASS" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="HOST" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PORT" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DATASOURCE" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="DBNAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="LOCAL_SERVICE_NAME" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="PROPERTIES" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="SCHEMA_DB" value="&quot;&quot;" show="false"/>
    <elementParameter field="TEXT" name="USER" value="&quot;&quot;" show="false"/>
    <elementParameter field="PASSWORD" name="PASS" value="enc:system.encryption.key.v1:tHKleWjLAVoCFJb8ggj+eg//dScD6wCPOJzM/nT9" show="false"/>
    <elementParameter field="FILE" name="DBFILE" value="&quot;&quot;" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE_STATS" value="&quot;&quot;" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE_LOGS" value="&quot;&quot;" show="false"/>
    <elementParameter field="DBTABLE" name="TABLE_METER" value="&quot;&quot;" show="false"/>
    <elementParameter field="CHECK" name="CATCH_RUNTIME_ERRORS" value="true" show="false"/>
    <elementParameter field="CHECK" name="CATCH_USER_ERRORS" value="true" show="false"/>
    <elementParameter field="CHECK" name="CATCH_USER_WARNING" value="true" show="false"/>
    <elementParameter field="CHECK" name="CATCH_REALTIME_STATS" value="false" show="false"/>
    <elementParameter field="TEXT" name="HEADERFOOTER_HEADERID" value="" show="false"/>
    <elementParameter field="CHECK" name="HEADER_ENABLED" value="false" show="false"/>
    <elementParameter field="TEXT" name="HEADER_LIBRARY" value="" show="false"/>
    <elementParameter field="TEXT" name="HEADER_CODE" value="" show="false"/>
    <elementParameter field="TEXT" name="HEADER_IMPORT" value="" show="false"/>
    <elementParameter field="TEXT" name="HEADERFOOTER_FOOTERID" value="" show="false"/>
    <elementParameter field="CHECK" name="FOOTER_ENABLED" value="false" show="false"/>
    <elementParameter field="TEXT" name="FOOTER_LIBRARY" value="" show="false"/>
    <elementParameter field="TEXT" name="FOOTER_CODE" value="" show="false"/>
    <elementParameter field="TEXT" name="FOOTER_IMPORT" value="" show="false"/>
  </parameters>
  <node componentName="tJava" componentVersion="0.101" offsetLabelX="0" offsetLabelY="0" posX="280" posY="80">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tJava_1" show="false"/>
    <elementParameter field="MEMO_EDITOR_JAVA" name="CODE" value="&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * class ASN1Decoder { void start () { String inputFile =&#xD;&#xA; * &quot;C://sajit//XLSMART//cdr_acn//BDG8_DIH_250508790748&quot;; try (ASN1InputStream&#xD;&#xA; * asn1InputStream = new ASN1InputStream(new FileInputStream(inputFile))) {&#xD;&#xA; * &#xD;&#xA; * ASN1Primitive obj; int counter = 1;&#xD;&#xA; * &#xD;&#xA; * while ((obj = asn1InputStream.readObject()) != null) {&#xD;&#xA; * System.out.println(obj.toString());&#xD;&#xA; * &#xD;&#xA; * counter++; }&#xD;&#xA; * &#xD;&#xA; * } catch (IOException e) { e.printStackTrace(); } } }&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;class ASN1Decoder2 {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;  void start (){&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  try{&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  ASN1InputStream asn1InputStream = new ASN1InputStream(new&#xD;&#xA;&#x9;  FileInputStream(&quot;C:\\Users\\Rahma\\Downloads\\BDG8_DIH_250508790748&quot;));&#xD;&#xA;&#x9;  ASN1Primitive obj;&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  while ((obj = asn1InputStream.readObject()) != null) { if (obj instanceof&#xD;&#xA;&#x9;  ASN1TaggedObject) { ASN1TaggedObject taggedObj = (ASN1TaggedObject) obj;&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  System.out.println(&quot;Tag No: &quot; + taggedObj.getTagNo());&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  ASN1Primitive innerObj = taggedObj.getLoadedObject() ;// get the actual&#x9;  content&#xD;&#xA;&#x9; &#xD;&#xA;&#x9;  // Example: if inner content is a sequence &#xD;&#xA;&#x9;  if (innerObj instanceof  ASN1Sequence) { ASN1Sequence sequence = (ASN1Sequence) innerObj; &#xD;&#xA;&#x9;  for&#x9;  (ASN1Encodable encodable : sequence) {&#xD;&#xA;&#x9;  System.out.println(encodable.toString()); } } else {&#xD;&#xA;&#x9;  System.out.println(&quot;&quot; + innerObj.toString()); } } else {&#xD;&#xA;&#x9;  System.out.println(&quot;&quot; + obj.toString()); } } asn1InputStream.close();&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  }catch(Exception se){&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  System.out.println(se.toString()); } }&#xD;&#xA;&#x9; &#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  void start2(){&#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  try{&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;  byte[] berEncodedData = new byte[] {&#xD;&#xA;&#x9;&#x9;            0x30, 0x0A,  // SEQUENCE (10 bytes)&#xD;&#xA;&#x9;&#x9;            0x02, 0x01, 0x05,  // INTEGER 5&#xD;&#xA;&#x9;&#x9;            0x04, 0x05, 'H', 'e', 'l', 'l', 'o'  // OCTET STRING &quot;Hello&quot;&#xD;&#xA;&#x9;&#x9;        };&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;  byte[] fileBytes = Files.readAllBytes(Paths.get(&quot;C:\\Users\\Rahma\\Downloads\\BDG8_DIH_250508790748&quot;));&#xD;&#xA;&#x9;&#x9;  ByteArrayInputStream bais = new ByteArrayInputStream(fileBytes);&#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  ASN1InputStream asn1InputStream = new ASN1InputStream(bais);&#xD;&#xA;&#x9;&#x9;  ASN1TaggedObject topLevelTag = (ASN1TaggedObject) asn1InputStream.readObject();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;  // Unwrap the EXPLICIT tag&#xD;&#xA;&#x9;&#x9;  ASN1Primitive inner = topLevelTag.getLoadedObject();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;  if (inner instanceof ASN1Sequence) {&#xD;&#xA;&#x9;&#x9;      ASN1Sequence seq = (ASN1Sequence) inner;&#xD;&#xA;&#x9;&#x9;      for (int i = 0; i &lt; seq.size(); i++) {&#xD;&#xA;&#x9;&#x9;          ASN1Encodable obj = seq.getObjectAt(i);&#xD;&#xA;&#x9;&#x9;          System.out.println(&quot;Element &quot; + i + &quot;: &quot; + obj);&#xD;&#xA;&#x9;&#x9;      }&#xD;&#xA;&#x9;&#x9;      &#xD;&#xA;&#x9;&#x9;  }&#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  byte[] data = java.nio.file.Files.readAllBytes(new File(&quot;C:\\Users\\Rahma\\Downloads\\BDG8_DIH_250508790748&quot;).toPath());&#xD;&#xA;&#xD;&#xA;&#x9;        ASN1InputStream ais = new ASN1InputStream(new ByteArrayInputStream(data));&#xD;&#xA;&#xD;&#xA;&#x9;        // Read as a tagged object [0] IMPLICIT SEQUENCE&#xD;&#xA;&#x9;        ASN1TaggedObject tagged = (ASN1TaggedObject) ais.readObject();&#xD;&#xA;&#xD;&#xA;&#x9;        // IMPLICIT SEQUENCE => parse directly&#xD;&#xA;&#x9;        ASN1Sequence sequence = ASN1Sequence.getInstance(tagged, false); // false = IMPLICIT&#xD;&#xA;&#x9;        ASN1Encodable[] elements = sequence.toArray();&#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        int index = 0;&#xD;&#xA;&#x9;        ASN1Encodable callDataRecordEncodable = null;&#xD;&#xA;&#x9;        ASN1Encodable eventModuleEncodable = null;&#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        if (elements.length > 0) {&#xD;&#xA;&#x9;            callDataRecordEncodable = elements[index];&#xD;&#xA;&#x9;            index++;&#xD;&#xA;&#x9;        }&#xD;&#xA;&#xD;&#xA;&#x9;        if (elements.length > 1) {&#xD;&#xA;&#x9;            eventModuleEncodable = elements[index];&#xD;&#xA;&#x9;        }&#xD;&#xA;&#xD;&#xA;&#x9;        // Parse callDataRecord (MyCallDataRecord) if present&#xD;&#xA;&#x9;        if (callDataRecordEncodable != null) {&#xD;&#xA;&#x9;            System.out.println(&quot;callDataRecord present xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: &quot; + callDataRecordEncodable.toString());&#xD;&#xA;&#x9;            // TODO: parse MyCallDataRecord here according to its definition&#xD;&#xA;&#x9;            &#xD;&#xA;&#x9;            &#xD;&#xA;&#x9;            if (callDataRecordEncodable != null) {&#xD;&#xA;&#x9;            &#x9;System.out.println(&quot;callDataRecord present xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: 1 &quot; );&#xD;&#xA;&#x9;                ASN1Sequence eventModuleSeq = ASN1Sequence.getInstance(callDataRecordEncodable);&#xD;&#xA;&#x9;                System.out.println(&quot;callDataRecord present xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: 2 &quot; );&#xD;&#xA;&#x9;                System.out.println(&quot;eventModule SEQUENCE OF size = &quot; + eventModuleSeq.size());&#xD;&#xA;&#x9;                System.out.println(&quot;callDataRecord present xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: 3 &quot; );&#xD;&#xA;&#xD;&#xA;&#x9;                for (ASN1Encodable eventEncodable : eventModuleSeq) {&#xD;&#xA;&#x9;                    if (!(eventEncodable instanceof ASN1TaggedObject)) {&#xD;&#xA;&#x9;                        throw new IOException(&quot;Expected ASN1TaggedObject in eventModule SEQUENCE&quot;);&#xD;&#xA;&#x9;                    }&#xD;&#xA;&#x9;                    ASN1TaggedObject eventTagged = (ASN1TaggedObject) eventEncodable;&#xD;&#xA;&#x9;                    parseEventModule(eventTagged);&#xD;&#xA;&#x9;                }&#xD;&#xA;&#x9;            } else {&#xD;&#xA;&#x9;                System.out.println(&quot;eventModule not present.&quot;);&#xD;&#xA;&#x9;            }&#xD;&#xA;&#x9;            &#xD;&#xA;&#x9;            &#xD;&#xA;&#x9;            &#xD;&#xA;&#x9;        }&#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#xD;&#xA;&#x9;        // Parse eventModule (SEQUENCE OF EventModule) if present&#xD;&#xA;&#x9;        if (eventModuleEncodable != null) {&#xD;&#xA;&#x9;            ASN1Sequence eventModuleSeq = ASN1Sequence.getInstance(eventModuleEncodable);&#xD;&#xA;&#x9;            System.out.println(&quot;Number of EventModule elements: &quot; + eventModuleSeq.size());&#xD;&#xA;&#xD;&#xA;&#x9;            for (ASN1Encodable eventElement : eventModuleSeq) {&#xD;&#xA;&#x9;                System.out.println(&quot;EventModule element: &quot; + eventElement.toString());&#xD;&#xA;&#x9;                // TODO: parse EventModule here according to its definition&#xD;&#xA;&#x9;            }&#xD;&#xA;&#x9;        }&#xD;&#xA;&#xD;&#xA;&#x9;        asn1InputStream.close();&#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;        // Print each element&#xD;&#xA;&#x9;        for (int i = 0; i &lt; sequence.size(); i++) {&#xD;&#xA;&#x9;            ASN1Encodable element = sequence.getObjectAt(i);&#xD;&#xA;&#x9;            System.out.println(&quot;Element ===&quot; + i + &quot;: &quot; + element);&#xD;&#xA;&#x9;        }&#xD;&#xA;&#xD;&#xA;&#x9;        ais.close();&#xD;&#xA;&#x9;    &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  &#xD;&#xA; asn1InputStream = new ASN1InputStream(new FileInputStream(&quot;C://sajit//XLSMART//cdr_acn//BDG8_DIH_250508790748&quot;));&#xD;&#xA;&#x9;        &#xD;&#xA;&#x9;&#x9;      //  ASN1InputStream asn1InputStream = new ASN1InputStream(bais);&#xD;&#xA;&#x9;&#x9;        ASN1Primitive obj = asn1InputStream.readObject();&#xD;&#xA;&#x9;&#x9;        &#xD;&#xA;&#x9;&#x9;        while ((obj = asn1InputStream.readObject()) != null) {&#xD;&#xA;&#x9;&#x9;            if (obj instanceof ASN1TaggedObject) {&#xD;&#xA;&#x9;&#x9;                {&#xD;&#xA;&#x9;&#x9;                &#x9;System.out.println(&quot;inside if ASN1TaggedObject&quot;);&#xD;&#xA;&#x9;&#x9;                &#x9;ASN1TaggedObject taggedObj = (ASN1TaggedObject) obj;&#xD;&#xA;&#x9;&#x9;                &#x9; inner = taggedObj.getLoadedObject();&#xD;&#xA;&#x9;&#x9;                &#x9;&#xD;&#xA;&#x9;&#x9;                &#x9;System.out.println(&quot;inner xxxxxxxxxxxxxxxxxxxxxxxxx: &quot; + inner.toString());&#xD;&#xA;&#x9;&#x9;                &#x9;&#xD;&#xA;&#x9;&#x9;                &#x9;System.out.println(&quot;Class: &quot; + taggedObj.getClass().getName());&#xD;&#xA;&#x9;&#x9;                &#x9;System.out.println(&quot;Tag No: &quot; + taggedObj.getTagNo());&#xD;&#xA;&#x9;&#x9;                &#x9;System.out.println(&quot;Explicit: &quot; + taggedObj.isExplicit());&#xD;&#xA;&#x9;&#x9;                &#x9;//System.out.println(&quot;Object: &quot; + taggedObj.getObject());&#xD;&#xA;///&#xD;&#xA;&#x9;&#x9;                &#x9;&#xD;&#xA;&#x9;&#x9;                &#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;                &#x9;// IMPLICIT: decode directly to the expected type&#xD;&#xA;&#x9;&#x9;                &#x9;ASN1Primitive inner1 = DERUTF8String.getInstance(taggedObj, false); // false = IMPLICIT&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;                &#x9;String department = ((ASN1String) inner1).getString();&#xD;&#xA;&#x9;&#x9;                &#x9;System.out.println(&quot;Department: &quot; + department);&#xD;&#xA;&#x9;&#x9;                &#x9;///&#xD;&#xA;&#x9;&#x9;                &#x9;&#xD;&#xA;&#x9;&#x9;                &#x9;if (inner instanceof ASN1String) {&#xD;&#xA;&#x9;&#x9;                &#x9;     department = ((ASN1String) inner).getString();&#xD;&#xA;&#x9;&#x9;                &#x9;    System.out.println(&quot;Department: &quot; + department);&#xD;&#xA;&#x9;&#x9;                &#x9;}&#xD;&#xA;&#x9;&#x9;                &#x9;&#xD;&#xA;&#x9;&#x9;                &#x9;&#xD;&#xA;&#x9;&#x9;                }&#xD;&#xA;&#x9;&#x9;                &#xD;&#xA;&#x9;&#x9;        &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;       &#xD;&#xA;&#x9;&#x9;        if (obj instanceof ASN1Sequence) {&#xD;&#xA;&#x9;&#x9;        &#x9;System.out.println(&quot;inside if Sequence&quot;);&#xD;&#xA;&#x9;&#x9;             sequence = (ASN1Sequence) obj;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;           // ASN1Integer intValue = (ASN1Integer) sequence.getObjectAt(0);&#xD;&#xA;&#x9;&#x9;            ASN1OctetString strValue = (ASN1OctetString) sequence.getObjectAt(0);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;            &#xD;&#xA;&#x9;&#x9;            System.out.println(&quot;String: &quot; + new String(strValue.getOctets()));&#xD;&#xA;&#x9;&#x9;        }&#xD;&#xA;&#x9;&#x9;            &#xD;&#xA;&#x9;&#x9;            }&#xD;&#xA;&#x9;&#x9;        }&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;        asn1InputStream.close();&#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;&#x9;  }catch(Exception se)&#xD;&#xA;&#x9;&#x9;  {&#xD;&#xA;&#x9;&#x9;&#x9;  System.out.println(se.toString());&#xD;&#xA;&#x9;&#x9;  }&#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;  }&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;void  parseEventModule(ASN1TaggedObject taggedObject) {&#xD;&#xA;          int tagNo = taggedObject.getTagNo();&#xD;&#xA;&#xD;&#xA;          ASN1Encodable content = taggedObject.getBaseObject(); // IMPLICIT tagging means direct content&#xD;&#xA;&#xD;&#xA;          switch (tagNo) {&#xD;&#xA;              case 10:&#xD;&#xA;                  System.out.println(&quot;EventModule: AoCEventModule (tag 10)&quot;);&#xD;&#xA;                  System.out.println(content.toASN1Primitive());&#xD;&#xA;                  // TODO: parse AoCEventModule here&#xD;&#xA;                  break;&#xD;&#xA;              case 11:&#xD;&#xA;                  System.out.println(&quot;EventModule: SSIEventModule (tag 11)&quot;);&#xD;&#xA;                  System.out.println(content.toASN1Primitive());&#xD;&#xA;                  // TODO: parse SSIEventModule here&#xD;&#xA;                  break;&#xD;&#xA;              case 12:&#xD;&#xA;                  System.out.println(&quot;EventModule: ServiceSwitchEventModule (tag 12)&quot;);&#xD;&#xA;                  System.out.println(content.toASN1Primitive());&#xD;&#xA;                  // TODO: parse ServiceSwitchEventModule here&#xD;&#xA;                  break;&#xD;&#xA;              case 16:&#xD;&#xA;                  System.out.println(&quot;EventModule: INServiceDataEventModule (tag 16)&quot;);&#xD;&#xA;                  System.out.println(content.toASN1Primitive());&#xD;&#xA;                  // TODO: parse INServiceDataEventModule here&#xD;&#xA;                  break;&#xD;&#xA;              case 20:&#xD;&#xA;                  System.out.println(&quot;EventModule: ChargeRateChangeEventModule (tag 20)&quot;);&#xD;&#xA;                  System.out.println(content.toASN1Primitive());&#xD;&#xA;                  // TODO: parse ChargeRateChangeEventModule here&#xD;&#xA;                  break;&#xD;&#xA;              case 23:&#xD;&#xA;                  System.out.println(&quot;EventModule: ISDNSSInvocationEventModule (tag 23)&quot;);&#xD;&#xA;                  System.out.println(content.toASN1Primitive());&#xD;&#xA;                  // TODO: parse ISDNSSInvocationEventModule here&#xD;&#xA;                  break;&#xD;&#xA;              case 25:&#xD;&#xA;                  System.out.println(&quot;EventModule: HandOverEventModule (tag 25)&quot;);&#xD;&#xA;                  System.out.println(content.toASN1Primitive());&#xD;&#xA;                  // TODO: parse HandOverEventModule here&#xD;&#xA;                  break;&#xD;&#xA;             &#xD;&#xA;          }&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;System.out.println(&quot;=============&quot;);&#xD;&#xA;&#xD;&#xA;ASN1Decoder2  asnd= new ASN1Decoder2();&#xD;&#xA;asnd.start();&#xD;&#xA;"/>
    <elementParameter field="MEMO_EDITOR_IMPORT" name="IMPORT" value="//import java.util.List;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;import java.io.*;&#xD;&#xA;import java.io.IOException;&#xD;&#xA;import java.nio.file.Files;&#xD;&#xA;import java.nio.file.Paths;&#xD;&#xA;import org.bouncycastle.asn1.*;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;import java.io.FileWriter;"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
    <metadata connector="FLOW" name="tJava_1"/>
  </node>
  <node componentName="tLibraryLoad" componentVersion="0.102" offsetLabelX="0" offsetLabelY="0" posX="80" posY="80">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLibraryLoad_1" show="false"/>
    <elementParameter field="MODULE_LIST" name="LIBRARY" value="&quot;mvn:org.talend.libraries/bcprov-jdk18on-1.80/6.0.0-SNAPSHOT/jar&quot;"/>
    <elementParameter field="TABLE" name="HOTLIBS"/>
    <elementParameter field="MEMO_IMPORT" name="IMPORT" value="//import java.util.List;"/>
    <elementParameter field="TEXT" name="CONNECTION_FORMAT" value="row"/>
  </node>
  <connection connectorName="SUBJOB_OK" label="OnSubjobOk" lineStyle="1" metaname="tLibraryLoad_1" offsetLabelX="0" offsetLabelY="0" source="tLibraryLoad_1" target="tJava_1">
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="OnSubjobOk1" show="false"/>
  </connection>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tJava_1" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="0;0;0" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="247;247;247"/>
  </subjob>
  <subjob>
    <elementParameter field="TEXT" name="UNIQUE_NAME" value="tLibraryLoad_1" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_TITLE_COLOR" value="0;0;0" show="false"/>
    <elementParameter field="COLOR" name="SUBJOB_COLOR" value="247;247;247"/>
  </subjob>
</talendfile:ProcessType>
